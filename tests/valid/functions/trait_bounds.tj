# Functions with Trait Bounds

def display_item[T: Implements[Display]](item: T) -> str {
    return item.to_str()
}

def compare_items[T: Implements[Eq]](a: T, b: T) -> bool {
    return a == b
}

def sort_items[T: Implements[Order]](items: [T]) -> [T] {
    # Simple bubble sort
    result: [T] = items.clone()
    for (i: int | 0..result.len()) {
        for (j: int | 0..result.len() - i - 1) {
            if result[j] > result[j + 1] {
                temp: T = result[j]
                result[j] = result[j + 1]
                result[j + 1] = temp
            }
        }
    }
    return result
}

def find_max[T: Implements[Order]](items: [T]) -> Option[T] {
    if items.len() == 0 {
        return None
    }
    
    max_item: T = items[0]
    for (item: T | items[1..]) {
        if item > max_item {
            max_item = item
        }
    }
    return Some(max_item)
}
