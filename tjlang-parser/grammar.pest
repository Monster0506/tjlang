// TJLang Grammar for pest
WHITESPACE = { " " | "\t" | "\r" | "\n" }
COMMENT = { "#" ~ (!"\n" ~ ANY)* }

program = { SOI ~ statement* ~ EOI }

// Statements
statement = { variable_decl | expression | block }

// Blocks
block = { "{" ~ statement* ~ "}" }

// Variable declarations
variable_decl = { identifier ~ ":" ~ type_ ~ "=" ~ expression }

// Types
type_ = { primitive_type | identifier }
primitive_type = { "int" | "float" | "bool" | "str" | "any" }

// Expressions (with proper precedence - right associative to avoid left recursion)
expression = { assignment }
assignment = { or_expr ~ ("=" ~ expression)? }
or_expr = { and_expr ~ ("or" ~ and_expr)* }
and_expr = { equality ~ ("and" ~ equality)* }
equality = { relational ~ (("==" | "!=") ~ relational)* }
relational = { additive ~ (("<=" | ">=" | "<" | ">") ~ additive)* }
additive = { multiplicative ~ (("+" | "-") ~ multiplicative)* }
multiplicative = { unary ~ (("*" | "/" | "%") ~ unary)* }
unary = { ("-" | "!")? ~ primary }
primary = { literal | identifier | "(" ~ expression ~ ")" }

// Literals
literal = { float_literal | integer_literal | string_literal | boolean_literal | none_literal }
integer_literal = { "-"? ~ ASCII_DIGIT+ }
float_literal = { "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
string_literal = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean_literal = { "true" | "false" }
none_literal = { "None" }

// Identifiers
identifier = { (ASCII_ALPHA | "_") ~ ASCII_ALPHANUMERIC* }