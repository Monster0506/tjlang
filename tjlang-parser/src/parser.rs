//! Pest-based parser for TJLang
//! This replaces the recursive descent parser with a more robust pest-based solution

use pest::Parser;
use pest::iterators::Pair;
use pest_derive::Parser;
use tjlang_ast::*;
use tjlang_diagnostics::{DiagnosticCollection, SourceSpan};
use codespan::Files;

// Import the generated parser
#[derive(Parser)]
#[grammar = "grammar.pest"]
pub struct TJLangPestParser;

// The Rule enum is generated by the derive macro and is in the same scope

/// Main parser struct using pest
pub struct PestParser {
    pub diagnostics: DiagnosticCollection,
}

impl PestParser {
    /// Create a new pest parser
    pub fn new() -> Self {
        Self {
            diagnostics: DiagnosticCollection::new(),
        }
    }




    /// Helper function to filter out whitespace from a pair's inner content
    fn filter_whitespace(pair: Pair<Rule>) -> Vec<Pair<Rule>> {
        pair.into_inner()
            .filter(|p| p.as_rule() != Rule::WHITESPACE)
            .collect()
    }

    /// Parse TJLang source code
    pub fn parse(&mut self, source: &str) -> Result<Program, Box<dyn std::error::Error>> {
        // Parse using pest
        let pairs = TJLangPestParser::parse(Rule::program, source)
            .map_err(|e| format!("Parse error: {}", e))?;

        
        // Convert pest pairs to AST
        let program = self.parse_program(pairs, source)?;
        Ok(program)
    }

    /// Parse program from pest pairs
    fn parse_program(&mut self, mut pairs: pest::iterators::Pairs<Rule>, _source: &str) -> Result<Program, Box<dyn std::error::Error>> {
        let program_pair = pairs.next().ok_or("No program found")?;
        let span = program_pair.as_span();
        
        let mut statements = Vec::new();
        for pair in program_pair.into_inner() {
            match pair.as_rule() {
                Rule::statement => {
                    if let Some(statement) = self.parse_statement(pair)? {
                        statements.push(statement);
                    }
                }
                Rule::EOI => break, // End of input
                _ => {} // Skip other rules
            }
        }

        // Create a simple program with just statements
        // For now, we'll create a single block containing all statements
        let _block = Block {
            statements,
            span: self.create_span(span),
        };
        let program = Program {
            units: vec![ProgramUnit::Declaration(Declaration::Variable(VariableDecl {
                name: "main".to_string(),
                var_type: Type::Primitive(PrimitiveType::Any),
                value: Expression::Literal(Literal::None),
                span: self.create_span(span),
            }))],
            span: self.create_span(span),
        };
        
        Ok(program)
    }

    /// Parse statement from pest pair
    fn parse_statement(&mut self, pair: Pair<Rule>) -> Result<Option<Statement>, Box<dyn std::error::Error>> {
        // println!("Parsing statement rule: {:?}, content: '{}'", pair.as_rule(), pair.as_str());
        match pair.as_rule() {
            Rule::statement => {
                let inner = pair.into_inner().next().ok_or("Empty statement")?;
                // println!("  -> inner statement rule: {:?}, content: '{}'", inner.as_rule(), inner.as_str());
                match inner.as_rule() {
                    Rule::variable_decl => {
                        let var_decl = self.parse_variable_decl(inner)?;
                        Ok(Some(Statement::Variable(var_decl)))
                    }
                    Rule::expression => {
                        let expr = self.parse_expression(inner)?;
                        Ok(Some(Statement::Expression(expr)))
                    }
                    Rule::block => {
                        let block = self.parse_block(inner)?;
                        Ok(Some(Statement::Block(block)))
                    }
                    _ => Ok(None)
                }
            }
            _ => Ok(None)
        }
    }

    /// Parse block
    fn parse_block(&mut self, pair: Pair<Rule>) -> Result<Block, Box<dyn std::error::Error>> {
        let span = pair.as_span();
        let mut statements = Vec::new();
        
        for inner_pair in pair.into_inner() {
            if let Some(statement) = self.parse_statement(inner_pair)? {
                statements.push(statement);
            }
        }
        
        Ok(Block {
            statements,
            span: self.create_span(span),
        })
    }

        /// Parse variable declaration
        fn parse_variable_decl(&mut self, pair: Pair<Rule>) -> Result<VariableDecl, Box<dyn std::error::Error>> {
            let span = pair.as_span();
            let non_whitespace = Self::filter_whitespace(pair);
            let mut iter = non_whitespace.into_iter();
            
            let name_pair = iter.next().ok_or("Missing variable name")?;
            let name = name_pair.as_str().to_string();
            
            // Note: colon ":" is a literal in the grammar and not included in the parse tree
            
            let type_pair = iter.next().ok_or("Missing type")?;
            let type_ = self.parse_type(type_pair)?;
            
            // Note: equals "=" is a literal in the grammar and not included in the parse tree
            
            let expr_pair = iter.next().ok_or("Missing expression")?;
            let expression = self.parse_expression(expr_pair)?;
            
            Ok(VariableDecl {
                name,
                var_type: type_,
                value: expression,
                span: self.create_span(span),
            })
        }

    /// Parse type
    fn parse_type(&mut self, pair: Pair<Rule>) -> Result<Type, Box<dyn std::error::Error>> {
        match pair.as_rule() {
            Rule::type_ => {
                // For the top-level type rule, parse its inner content
                let inner = pair.into_inner().next().ok_or("Empty type")?;
                self.parse_type(inner)
            }
            Rule::primitive_type => {
                let type_str = pair.as_str();
                let primitive_type = match type_str {
                    "int" => PrimitiveType::Int,
                    "float" => PrimitiveType::Float,
                    "bool" => PrimitiveType::Bool,
                    "str" => PrimitiveType::Str,
                    "any" => PrimitiveType::Any,
                    _ => return Err(format!("Unknown primitive type: {}", type_str).into()),
                };
                Ok(Type::Primitive(primitive_type))
            }
            Rule::identifier => {
                let name = pair.as_str().to_string();
                Ok(Type::Identifier(name))
            }
            _ => Err(format!("Expected type, got {:?}", pair.as_rule()).into())
        }
    }

    /// Parse expression with proper precedence
    fn parse_expression(&mut self, pair: Pair<Rule>) -> Result<Expression, Box<dyn std::error::Error>> {
        let span = pair.as_span();
        
        match pair.as_rule() {
            Rule::expression => {
                // For the top-level expression rule, just parse its inner content
                let inner = pair.into_inner().next().ok_or("Empty expression")?;
                self.parse_expression(inner)
            }
            Rule::WHITESPACE => {
                // Skip whitespace - this shouldn't happen with automatic whitespace handling
                Err("Unexpected whitespace token".into())
            }
            Rule::assignment => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                if let Some(assign_pair) = iter.next() {
                    if assign_pair.as_str() == "=" {
                        let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                        // For now, just return the right side since we don't have assignment expressions in AST yet
                        Ok(right)
                    } else {
                        Ok(left)
                    }
                } else {
                    Ok(left)
                }
            }
            Rule::or_expr => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    if op_pair.as_str() == "or" {
                        let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                        left = Expression::Binary {
                            left: Box::new(left),
                            operator: BinaryOperator::Or,
                            right: Box::new(right),
                            span: self.create_span(span),
                        };
                    } else {
                        // This should be the next expression
                        left = self.parse_expression(op_pair)?;
                    }
                }
                Ok(left)
            }
            Rule::and_expr => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    if op_pair.as_str() == "and" {
                        let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                        left = Expression::Binary {
                            left: Box::new(left),
                            operator: BinaryOperator::And,
                            right: Box::new(right),
                            span: self.create_span(span),
                        };
                    } else {
                        left = self.parse_expression(op_pair)?;
                    }
                }
                Ok(left)
            }
            Rule::equality => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    match op_pair.as_str() {
                        "==" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Equal,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        "!=" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::NotEqual,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        _ => {
                            left = self.parse_expression(op_pair)?;
                        }
                    }
                }
                Ok(left)
            }
            Rule::relational => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    match op_pair.as_str() {
                        "<" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::LessThan,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        ">" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::GreaterThan,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        "<=" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::LessThanEqual,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        ">=" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::GreaterThanEqual,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        _ => {
                            left = self.parse_expression(op_pair)?;
                        }
                    }
                }
                Ok(left)
            }
            Rule::additive => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    match op_pair.as_str() {
                        "+" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Add,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        "-" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Subtract,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        _ => {
                            left = self.parse_expression(op_pair)?;
                        }
                    }
                }
                Ok(left)
            }
            Rule::multiplicative => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                let mut left = self.parse_expression(iter.next().ok_or("Missing left operand")?)?;
                
                while let Some(op_pair) = iter.next() {
                    match op_pair.as_str() {
                        "*" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Multiply,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        "/" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Divide,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        "%" => {
                            let right = self.parse_expression(iter.next().ok_or("Missing right operand")?)?;
                            left = Expression::Binary {
                                left: Box::new(left),
                                operator: BinaryOperator::Modulo,
                                right: Box::new(right),
                                span: self.create_span(span),
                            };
                        }
                        _ => {
                            left = self.parse_expression(op_pair)?;
                        }
                    }
                }
                Ok(left)
            }
            Rule::unary => {
                let non_whitespace = Self::filter_whitespace(pair);
                let mut iter = non_whitespace.into_iter();
                
                if let Some(op_pair) = iter.next() {
                    match op_pair.as_str() {
                        "-" => {
                            let operand = self.parse_expression(iter.next().ok_or("Missing operand")?)?;
                            Ok(Expression::Unary {
                                operator: UnaryOperator::Negate,
                                operand: Box::new(operand),
                                span: self.create_span(span),
                            })
                        }
                        "!" => {
                            let operand = self.parse_expression(iter.next().ok_or("Missing operand")?)?;
                            Ok(Expression::Unary {
                                operator: UnaryOperator::Not,
                                operand: Box::new(operand),
                                span: self.create_span(span),
                            })
                        }
                        _ => {
                            // No unary operator, parse as primary
                            self.parse_expression(op_pair)
                        }
                    }
                } else {
                    // No unary operator, parse as primary
                    Err("Missing unary expression".into())
                }
            }
            Rule::primary => {
                let inner = pair.into_inner().next().ok_or("Empty primary expression")?;
                match inner.as_rule() {
                    Rule::literal => {
                        let literal = self.parse_literal(inner)?;
                        Ok(Expression::Literal(literal))
                    }
                    Rule::identifier => {
                        let name = inner.as_str().to_string();
                        Ok(Expression::Variable(name))
                    }
                    Rule::expression => {
                        // This is for parenthesized expressions - parse the inner expression
                        let inner_expr = inner.into_inner().next().ok_or("Empty parenthesized expression")?;
                        self.parse_expression(inner_expr)
                    }
                    _ => Err(format!("Expected primary expression, got {:?}", inner.as_rule()).into())
                }
            }
            _ => Err(format!("Expected expression, got {:?}", pair.as_rule()).into())
        }
    }

    /// Parse literal
    fn parse_literal(&mut self, pair: Pair<Rule>) -> Result<Literal, Box<dyn std::error::Error>> {
        let inner = pair.into_inner().next().ok_or("Empty literal")?;
        
        // println!("        Parsing literal inner: {:?}, content: '{}'", inner.as_rule(), inner.as_str());
        
        match inner.as_rule() {
                Rule::integer_literal => {
                    let content = inner.as_str().trim();
                    let value = content.parse::<i64>()
                        .map_err(|e| format!("Invalid integer: {} (content: '{}')", e, content))?;
                    Ok(Literal::Int(value))
                }
            Rule::float_literal => {
                let value = inner.as_str().parse::<f64>()
                    .map_err(|e| format!("Invalid float: {}", e))?;
                Ok(Literal::Float(value))
            }
            Rule::string_literal => {
                let value = inner.as_str().to_string();
                // Remove quotes
                let value = value.trim_start_matches('"').trim_end_matches('"').to_string();
                Ok(Literal::String(value))
            }
            Rule::boolean_literal => {
                let value = inner.as_str() == "true";
                Ok(Literal::Bool(value))
            }
            Rule::none_literal => {
                Ok(Literal::None)
            }
            _ => Err(format!("Expected literal, got {:?}", inner.as_rule()).into())
        }
    }

    /// Create a SourceSpan from a pest span
    fn create_span(&self, span: pest::Span) -> SourceSpan {
        let mut files = Files::new();
        let file_id = files.add("input.tj", "");
        SourceSpan::new(file_id, codespan::Span::new(span.start() as u32, span.end() as u32))
    }
}